FACULTY OF SCIENCE, ENGINEERING AND COMPUTINGSchool of Computer Science & MathematicsBSc DEGREEIN BSc (Hons) in Software EngineeringPROJECT PROPOSALName: L.G. Hasara SesadiID Number: E211307/K 2524356Project Title: “QuickFix” A Mobile App for Instant Home Repairs and Maintenance Requests.Project Type: Build  Date: 08 / 07 /2025Supervisor: T. W. Dileepa LakshanDid you discuss and agree the viability of your project idea with your supervisor? 	Yes          Did you submit a draft of your proposal to your supervisor?       	                       Yes           Did you receive feedback from your supervisor on any submitted draft?               	 Yes AbstractQuickFix is a mobile app designed to solve the problem of finding quick, reliable help for urgent home repairs like plumbing, electrical, and handyman jobs. Unlike traditional service apps that require days of scheduling, QuickFix instantly connects users with nearby technicians who are immediately available. The app provides real-time tracking of technicians, reliable technician ratings and reviews, and an intelligent chatbot assistant to ensure a smooth user experience. The approach includes a user-friendly interface built with Flutter for Android, a robust backend using Node.js with Express for fast request handling, MongoDB for efficient data storage, and a Python-based chatbot for 24/7 user support.This project focuses on building an instant matching system to solve the key problem of delayed repairs. The input will be the user’s service request and location, and the output will be a matching technician with arrival details and intelligent chatbot assistance. The process involves real-time search algorithms, location tracking, and natural language processing. Analysis and design include user journey mapping, database modeling, and chatbot conversation flow design. Implementation uses a modular, API-driven structure with integrated chatbot functionality, and evaluation includes user testing to check response time, service satisfaction, and chatbot effectiveness. Ultimately, QuickFix aims to make home repairs faster, easier, and more stress-free with intelligent support.Contents1.	Introduction & Background	11.1 Introduction	11.2 Background and Motivation	11.3	Literature Review	21.4	Problem in brief	42.	Aim & Objectives	51.2.1 Aim	51.2.2 Objectives	53. Technologies & Resources	62.1 Technologies Used	62.2 Resource Requirement	74. Methodology & Work plan	84.1 My Project Methodology (SDLC)	94.1.1 Requirements Analysis	94.1.2 System Design	104.1.3 Implementation	104.1.4 Testing and Debugging	114.1.5 Deployment and training	114.1.6 Evaluation and maintenance	124.2 Planning Gantt chart	145.	Proposed Solution	155.1 Ethical Aspects	175.2 Data Security Procedures	175.3 Suggested Starting Point	176.	Discussion	186.1	Legal Concerns	18Data Privacy Laws	18Intellectual Property (IP)	18Contractual Obligations	186.2 Ethical Concerns	19User Data Ownership	19Transparency	19Digital Accessibility	196.3 Security Issues	19Account Security	19Data Encryption	19System Security	20Data Backup	206.4 Social Issues	20Community Trust	20Fair Work Opportunities	20Affordable Service access	20Cultural Awareness	207.	References / Bibliography	21Appendices	23
List of Figures/TablesFigure 1 SDLC	9Figure 2 Work flow chart	13Figure 3 Gant Chart	15Table 1 Technologies Used	7Table 2 Resource Requirement	8Table 3 Gant chart	14Glossary of Terms1. QuickFix* A mobile app that helps users quickly find local technicians for urgent home repairs.2. Flutter	* A tool used to create mobile apps that work smoothly on Android devices.3. Node.js	* A platform for building fast and scalable backend (server-side) applications.4. Express.js	* A tool used with Node.js to handle web server requests and responses.5. MongoDB	* A type of database that stores information like users, bookings, and technicians.6. Firebase Authentication	* A service that allows secure user login and account management.7. Google Maps API	* A tool that helps show live maps and real time technician locations in the app.8. Real Time Tracking	* A feature that shows the technician’s current location as they travel to the user.9. Instant Booking	* The ability for users to quickly request a repair service within a minute.10. Matching Algorithm	* A system that connects users with the nearest available technician based on location and availability.11. User Interface (UI)	* The part of the app users interact with, like buttons, maps, and menus.12. User Experience (UX)	* The overall experience of a person using the app, including how easy and pleasant it is.13. Encryption	* A method of keeping data secure by converting it into a secret code.14. Two Factor Authentication	* A security method requiring a password and a second form of ID (like a code).15. Gantt Chart	* A timeline chart used to plan project tasks and deadlines.16. Emergency Repair	* Urgent repair tasks like fixing a water leak, power failure, or broken item.17. Admin Panel	* A special web interface where administrators can manage users, services, and system settings.18. Review and Rating System	* A feature where users rate and comment on technicians after a service.19. Data Privacy	* Protecting personal information from being used or shared without permission.20. Role Based Access Control (RBAC)	* A security method that allows only certain users to access specific parts of the system.
1. Introduction & Background1.1 IntroductionMobile apps for home service are becoming more popular, but most of them are focused on pre-scheduled maintenance rather than emergency repairs. QuickFix takes its place by providing a platform that addresses the issue of emergency home repairs by connecting users with local technicians in real-time while providing intelligent chatbot support for enhanced user experience. The app is designed to make users’ lives easier by eliminating the waiting times that typically accompany repair scheduling and providing 24/7 assistance through an AI-powered chatbot. It ensures that users with emergencies like leaking pipes or electrical problems can get help without any delay and receive instant support through the integrated chatbot system.The major technologies used in QuickFix: Flutter, Node.js, MongoDB, and Python-based chatbot have been selected carefully to ensure a seamless and efficient app. Flutter offers a smooth mobile experience on Android devices, while Node.js and Express allow fast processing of user requests. MongoDB, a flexible schema NoSQL database, is the ideal choice for managing various types of data such as user profiles, technician data, real-time service requests, and chatbot conversation logs. The Python-based chatbot provides intelligent assistance for booking, troubleshooting, and customer support. The project aligns with recent trends where speed, reliability, intelligent assistance, and end-user confidence are pivotal to success.1.2 Background and MotivationExisting home repair apps take a long time to respond and often lack immediate support, which is demotivating for customers who are faced with emergencies. Home repairs need to be done as quickly as possible to prevent further damage or injury, and users often need immediate guidance and support during stressful situations. This indicates the urgent necessity of an app like QuickFix, where customers can immediately contact experts based on location and availability while receiving instant support through an intelligent chatbot assistant.The driving force behind the project is the realization that a significant amount of this kind of service request is emergency-based and requires immediate assistance and guidance. Success of other platforms like Uber, based on real-time matching, combined with the growing demand for AI-powered customer support, is the underlying mechanics behind QuickFix. Adapting the same methods but for domestic repair with added intelligent chatbot functionality, QuickFix aims to bring reliability, instant help, and 24/7 support to the home repair business.1.3 Literature Review 1. Mobile Apps Development:  A Framework for Technology Decision MakingThe paper "Mobile Apps Development: A Framework for Technology Decision Making" presents a structured approach to help developers choose the most suitable technology for mobile app development based on specific requirements and context. Recognizing the complexity of deciding between platforms and development technologies (ex: native, web, or hybrid approaches), the authors propose a decision making framework supported by surveys, interviews, and case studies. They introduce a prototype tool that, given the app’s needs and device features, recommends the best development technology among several options, such as HTML5, native SDKs (Android, iOS), and hybrid tools like PhoneGap or Titanium. The study addresses the lack of public data in this domain and seeks to offer practical guidance grounded in expert experiences and empirical data. (Masi, 2013)                                                                                                                                                (Masi, 2013)2. A Mobile App. UI/UX Design for the Gas Safety WorkersThe paper titled "A Mobile App. UI/UX Design for the Gas Safety Workers" explores the development of a user friendly mobile application aimed at enhancing the safety of gas field workers, who often operate in hazardous environments. Through literature reviews, expert interviews, and field surveys, the study identifies specific user requirements, such as high readability, low navigational depth, and intuitive iconography tailored to workers with limited familiarity with digital devices. The app design supports different work scenarios by providing alerts, safety instructions, and emergency protocols, especially for tasks where manual operation of devices is not feasible. It incorporates UI/UX principles such as large touch areas, minimal menus, and color coded warnings to ensure usability even under stressful and physically demanding conditions. The paper emphasizes the need for further development and testing with real users and suggests integrating interactive devices to improve real time hazard communication. (Lee, 2016)                                                                                                                                     (Lee, 2016)3. Real time Rideshare Matching  ProblemThe document titled "Real time Rideshare Matching Problem" is a comprehensive final project report prepared by researchers from the University of Maryland and other institutions. It addresses the inefficiencies of traditional ridesharing programs and proposes an optimization based framework for real time rideshare matching. The study highlights the potential of dynamic ridesharing to reduce traffic congestion, fuel consumption, and greenhouse gas emissions by increasing vehicle occupancy through flexible, on demand carpooling. The report examines technological enablers like GPS, smartphones, and real time traffic data, and reviews several past and ongoing rideshare projects across the U.S. It identifies key challenges, including user safety, limited participation, and system design flaws, and introduces a novel optimization algorithm to improve match success rates based on user preferences and constraints such as proximity, time, gender, and smoking tolerance. (Ghoseiri, 2010)                                                                                                                                (Ghoseiri, 2010)4. From Consumer Satisfaction to  Recommendation of Mobile  App Based Services: An Overview  of Mobile Taxi Booking AppsThe study titled "From Consumer Satisfaction to Recommendation of Mobile App Based Services: An Overview of Mobile Taxi Booking Apps" investigates the factors influencing user satisfaction and their subsequent intention to recommend mobile taxi booking (MTB) services. By modifying and extending the Unified Theory of Acceptance and Use of Technology 2 (UTAUT2), the authors integrate consumer satisfaction as a mediating factor between constructs such as performance expectancy, effort expectancy, social influence, facilitating conditions, hedonic motivation, price value, and habit. The research, based on data from MTB users in Pakistan and analyzed using Partial Least Squares Structural Equation Modeling (PLS-SEM), finds that all these factors significantly affect consumer satisfaction, which in turn positively influences the likelihood of recommending the service. The study offers valuable insights for MTB service providers to improve user experience and customer loyalty through better app design, affordability, usability, and engaging features. (Xu, 2021)                                                                                                                                     (Siyal, 2021)5. Trusted Platform on demand (TPod)The document titled "Trusted Platform on Demand (TPod)" presents a security architecture designed to enhance trust in distributed, on demand computing environments. TPod combines trusted computing technologies like the Trusted Computing Group (TCG) standards, SELinux, and OSGi to create a secure, verifiable software platform for running applications across different administrative domains. It features a layered architecture with a trust layer (for integrity attestation and platform measurement), a protection layer (enforcing access controls and isolating application domains), and an interoperability layer (supporting secure communication via open standards like Web Services Security). The system allows application owners to verify the integrity and security posture of remote hosts before deployment, enabling flexible, policy based trust decisions. TPod also incorporates hardware based trust via TPM chips, and supports fine grained domain management, secure key handling, and runtime integrity verification, making it resilient against both software vulnerabilities and unauthorized access even in the presence of untrusted system administrators. (Maruyama, 2004)										(Maruyama,2004)				1.4 Problem in briefThe main problem QuickFix addresses is the lack of immediate access to home repair services during emergencies. Current apps provide mostly pre scheduled services, which result in stress and potential damage in situations of needed emergency repairs. Users need a way to obtain immediate, reliable, available technicians without having to wait for days.QuickFix solves this by solely focusing on real time matching and availability via real time location monitoring, adding a chatbot, and live technician availability updates. This ensures timely management of emergencies, reducing damage, cost, and stress for users in need of immediate assistance.2. Aim & Objectives1.2.1 AimThe aim of this project is to developing a user-friendly mobile app that provides instant access to local technicians for emergency home repairs, ensuring quick, reliable and transparent service with intelligent chatbot support.1.2.2 Objectives* Enable instant booking - Allow users to request a technician in under a minute. This helps users get help quickly, especially in emergencies. It makes the process easy and stress-free without the need for lengthy forms or waiting.* Provide real-time tracking - Show the technician’s location and estimated arrival. Users will be able to see the technician’s live location on a map and know when they will arrive. This feature helps users feel more informed and less anxious while waiting.* Build a trusted network - Use customer ratings and reviews to maintain service quality. The app allows users to rate and review technicians after a service is completed. This system helps maintain high-quality services and rewards good technicians.* Add intelligent chatbot - Use a Python-based chatbot to assist users 24/7 with booking, support, and updates. The chatbot will help users navigate the app, answer common questions, provide troubleshooting guidance, and assist with the booking process even when human support is unavailable.* Develop an instant matching algorithm - The app automatically finds and suggests the closest technician available to the user. It will consider the technician’s location, availability, and skills to make the best match.* Assess user satisfaction and response time to refine service delivery - After using the app, users will be asked for feedback on their experience, chatbot interactions, and how quickly help arrived. This information will be used to improve the app and service quality over time.3. Technologies & Resources2.1 Technologies UsedCategoryTechnologyResource / PurposeFrontend DevelopmentFlutterTo build a smooth, cross platform mobile application interface (Android) using a single code base.Backend DevelopmentNode.js with ExpressTo handle server side logic, manage service requests, and provide fast responses.DatabaseMongoDBTo flexibly store user data, technician profiles, and repair booking details.APIGoogle Maps APITo track real time locations and match users with nearby technicians.AuthenticationFirebase AuthenticationTo manage secure user login, registration, and user identity.Chatbot DevelopmentPython with NLP LibrariesTo provide intelligent 24/7 customer support, booking assistance, and troubleshooting guidance.Chatbot FrameworkFlask/FastAPITo create RESTful APIs for chatbot integration with the main application.Natural Language ProcessingspaCy/NLTKTo process and understand user queries in natural language.Table 1 Technologies Used2.2 Resource RequirementCategoryResourcePurposeHardware ResourcesAndroid SmartphoneTo test the mobile application on a real device to ensure performance and usability.Laptop/PCTo code, develop, and manage front end and back end components.Software ResourcesInternet Connection	To host the back end server and enable real time communication.MongoDB Atlas AccountTo store application data such as users, technicians, and service reservations in the cloud.Firebase AccountTo handle secure user authentication and login.Google Maps API KeysTo enable real time location tracking and technician matching features.Python EnvironmentTo develop and run the chatbot service with required NLP libraries.Cloud Hosting ServiceTo deploy the chatbot API and ensure 24/7 availability.Table 2 Resource Requirement4. Methodology & Work planThe QuickFix mobile application will follow the Software Development Life Cycle (SDLC) model to ensure a structured, step by step approach to developing and delivering a reliable and functional system. The SDLC phases include requirements analysis, system design, implementation, testing and debugging, deployment and training, and evaluation and maintenance.The agile methodology will guide the development process during these SDLC phases, using weekly sprints and continuous feedback. The key project phases, key milestones, and expected deliverables are described below.4.1 My Project Methodology (SDLC)Figure 1 SDLC4.1.1 Requirements AnalysisActivities* Define system goals such as real time industrial matching and emergency service handling.* Identify user requirements through research on existing platforms and emergency service expectations.* Document functional and non functional requirements such as speed, reliability, and ease of use.MilestonesRequirement’s document completed.DeliverablesSystem Requirements Specification (SRS).4.1.2 System DesignActivities* Create UI wireframes and application flow using tools such as Figma.* Create backend architecture to manage requests, authentication, and live tracking.* Create MongoDB schema to store user, industrial, and reservation data.* Design chatbot conversation flows and response patterns.MilestonesFinished UI/UX design and backend architecture and chatbot design.DeliverablesWireframes, system flow diagrams, database schema, and chatbot architecture.4.1.3 ImplementationActivities* Develop the front end using Flutter for Android.* Implement the back end using Node.js and Express.* Connect MongoDB to store service records.* Integrate APIs like Google Maps for tracking and Firebase for user authentication.* Integrate chatbot API with the main application.MilestonesCore modules, instant matching system, and chatbot developed.DeliverablesA working prototype of the app with integrated chatbot functionality.4.1.4 Testing and DebuggingActivities* Conduct unit tests on individual features such as login, booking, and live tracking and chatbot responses.* Perform system tests to ensure front end and back end integration and chatbot integration.* Test chatbot conversation flows and response accuracy.* Gather feedback from test users for improvements.MilestonesBug fixes, improved functionality, and optimized chatbot performance.DeliverablesTest report and fully functional system with working chatbot.4.1.5 Deployment and trainingActivities* Deploy the mobile application and chatbot service to test environments. * Create user guides explaining how to use the application and interact with the chatbot. * Provide training documentation for technicians and chatbot usage.MilestonesSuccessful deployment to test environment with chatbot service.DeliverablesLive application version with chatbot and user guidance materials.4.1.6 Evaluation and maintenanceActivities* Collect user feedback on app performance and chatbot effectiveness.* Monitor chatbot conversation logs for improvement opportunities.* Identify areas for improvement for updates and future versions.* Train chatbot with new data and improve response accuracy.MilestonesEvaluation feedback collected and implemented.DeliverablesUpdated application version and evaluation report.Work flow chart for systemFigure 2 Work flow chart4.2 Planning Gantt chartPhaseMilestoneStart DateEnd DatePlanningSelect and finalize app concept2025/03/172025/03/20Define objectives, stakeholders, and features2025/03/212025/03/27Requirement AnalysisGather user requirements and define use cases2025/03/312025/04/07System DesignDesign UI wireframes and data flow diagrams2025/04/082025/04/21Create backend architecture and database schema2025/04/222025/05/02ImplementationDevelop Flutter frontend2025/05/062025/06/13Build backend with Node.js and MongoDB2025/06/162025/07/14Integrate Google Maps API and Firebase Auth2025/07/152025/08/08Testing and debuggingPerform unit and integration testing2025/08/122025/08/25Test technician matching and real time tracking2025/08/262025/09/03DeploymentDeploy backend and mobile app for user testing2025/09/052025/09/18Collect feedback and train beta testers2025/09/192025/10/03Evaluation & MaintenanceMonitor performance and update features2025/10/062025/10/22DocumentationWrite user manual and final project report2025/10/242025/11/07SubmissionSubmit final app and documentation2025/11/102025/11/25Table 3 Gant chartFigure 3 Gant Chart5. Proposed SolutionThe solution proposed is the development of a mobile and web app called QuickFix to facilitate customers with nearby technicians for on demand fixing. The system will allow real time tracking of location, management of bookings, and updates of technician availability to make the process efficient and user friendly.Key Features,* User Authentication and Profile Management: Secure login system using Firebase Authentication, allowing users and technicians to create and manage their profiles.* Booking Management: Customers can easily book repair services, view technician availability, and get estimated arrival times.* Technician Dashboard: Technicians will receive job alerts, manage appointments, and update their status (Available, On the Job, Not Available).* Real time Tracking: Google Maps API integration allows users to track the technician’s location during service delivery.* Smart Matching Algorithm: Backend logic developed using Node.js and Express matches users with the nearest technician based on location and service type.* Database Management: MongoDB will be used to store user data, technician profile, booking history, and service feedback.* Notification System: Alerts for booking confirmation, technician arrival, service completion, and feedback collection.* Admin Panel: Web based admin dashboard to manage users, technicians, and service categories.* Chatbot Integration: AI-powered chatbot to provide instant customer support and answer common queries.5.1 Ethical AspectsThe QuickFix app is developed with ethical considerations. It will not make use of personal information such as user names, contact numbers, and location for any purpose except for service purposes. All customers and technicians will be required to agree to the use of their data under the app's privacy policy. The chatbot will be designed to maintain user privacy and will not store sensitive personal information unless necessary for service delivery.The platform will also feature a balanced review and rating system to prevent biased or spurious reporting. Technicians on the QuickFix platform will be confirmed as qualified professionals with background checks and qualification verification performed before allowing them to accept requests.5.2 Data Security ProceduresSecurity of data is provided with utmost priority in the QuickFix application. Secure user login will utilize Firebase authentication to prevent unauthorized access. Passwords and all sensitive data will be encrypted. Data transfer between the application, server, and chatbot service during real-time interaction will utilize HTTPS protocols.MongoDB Atlas, a secure cloud database, will be used to store user, technician, and chatbot data. Role-based access control will be implemented, and the chatbot service will have secure API endpoints with proper authentication. Regular backups and data monitoring will be performed to avoid loss of service and information.5.3 Suggested Starting PointDevelopment of QuickFix begins with user research and requirements collection, including chatbot functionality requirements. Following requirements definition, wireframes, UI mockups, and chatbot conversation flows will be created using tools like Figma.After the design phase, front-end development will start with Flutter, followed by back-end integration using Node.js and MongoDB, and chatbot development using Python. The initial prototypes will be tested with a small group of users to gather feedback on both app functionality and chatbot effectiveness before final launch.6. Discussion6.1 Legal ConcernsData Privacy LawsQuickFix collects personal user information and chatbot conversation data. The app must follow legal laws such as the Sri Lanka Personal Data Protection Act or international laws such as the GDPR, with special attention to chatbot data handling and user consent for AI-powered interactions.Intellectual Property (IP)QuickFix must only use images, icons, coding elements, and chatbot training data that it owns or has permission to use. The chatbot responses and training data must be original or properly licensed.Contractual ObligationsClear legal agreements must be established with third-party services including Google Maps, Firebase, and cloud hosting services for the chatbot infrastructure.6.2 Ethical ConcernsUser Data OwnershipUsers should have full control over their personal information and chatbot interaction data. The chatbot should clearly inform users about data collection and provide options to delete conversation history.TransparencyQuickFix should clearly explain how the chatbot works, what data it collects, how technicians are matched, and how reviews work. The chatbot should be transparent about its AI nature and limitations.Digital AccessibilityThe app and chatbot should be accessible to users with different technical abilities, including voice to text capabilities and simple language processing.6.3 Security IssuesAccount SecurityEnhanced security measures including strong passwords, two-step verification, and secure chatbot authentication to prevent unauthorized access to user accounts and conversation data.Data EncryptionPersonal data and chatbot conversations should be encrypted both in transit and at rest to protect user privacy and prevent unauthorized access.System SecurityRegular security audits of the main application and chatbot service to identify and fix vulnerabilities, with special attention to AI model security and data protection.Data BackupComprehensive backup systems for user data, technician information, and chatbot conversation logs to ensure business continuity and data recovery.6.4 Social IssuesCommunity TrustBuilding trust through transparent chatbot interactions, reliable service matching, and responsive customer support that combines AI efficiency with human oversight.Fair Work OpportunitiesEnsuring the platform provides equal opportunities for all technicians while using the chatbot to help them better understand and access available jobs.Affordable Service accessMaintaining affordable pricing while providing valuable chatbot support that enhances the user experience without additional costs.Cultural AwarenessDesigning the chatbot to understand and respect local customs, languages, and communication styles to provide culturally appropriate assistance.7. References / BibliographyGhoseiri, K. e. a. “.-T. R. M. P., 2010. Bts.gov, Mid-Atlantic Universities Transportation Center,. [Online] Available at: rosap.ntl.bts.gov/view/dot/25988. [Accessed 7 May 2025].Hashemi, M. a. H. A. K., 2014. Computers Environment and Urban Systems,. [Online] Available at: www.sciencedirect.com/science/article/abs/pii[Accessed 29 April 2025].https://d1wqtxts1xzle7.cloudfront.net/30048577/10.1.1.207.5700-libre.pdf?1390878768=&response-content-disposition=inline%3B+filename%3DTrusted_platform_on_demand_TPod.pdf&Expires=1746635816&Signature=XY6bns4n2iVQXxQvBtbkoGOZzpOs6vgJhYClwWJXNoOM6fWUfHthiG4, 2004. [Online] Available at: https://d1wqtxts1xzle7.cloudfront.net/30048577/10.1.1.207.5700-libre.pdf?1390878768=&response-content-disposition=inline%3B+filename%3DTrusted_platform_on_demand_TPod.pdf&Expires=1746635816&Signature=XY6bns4n2iVQXxQvBtbkoGOZzpOs6vgJhYClwWJXNoOM6fWUfHthiG4[Accessed 07 May 2025].Lee, J. A. e. a. “. M. A. U. D. f. t. G. S. W., 2016. Indian Journal of Science and Technology,. [Online] Available at: https://doi.org/10.17485/ijst/2016/v9i48/108736.[Accessed 07 May 2025].Maruyama, H. e. a. T. P. o. D. (. 2., 2004. [Online] Available at: https://d1wqtxts1xzle7.cloudfront.net/30048577/10.1.1.207.5700-libre.pdf?1390878768=&response-content-disposition=inline%3B+filename%3DTrusted_platform_on_demand_TPod.pdf&Expires=1746635816&Signature=XY6bns4n2iVQXxQvBtbkoGOZzpOs6vgJhYClwWJXNoOM6fWUfHthiG4[Accessed 07 May 2025].Masi, E. e. a. “. A. D. A. F. f. T. D. M., 2013. Mobile Computing, Applications, and Services,. [Online] Available at: https://doi.org/10.1007/978-3-642-36[Accessed 29 April 2025].Research.”, “. J. D. W.-C., 2018. Sage Journals,. [Online] Available at: journals.sagepub.com/page/sgo/help/sage-open-reviewer-pool. [Accessed 29 April 2025].Xu, X. “. A. C. C. O. a. H. I. T. S. A. E. O. R. i. t. O.-D. F. S. C., 2021. Decision Support Systems,. [Online] Available at: www.sciencedirect.com/science/article/abs/pii/S0[Accessed 29 April 2025].AppendicesAppendix A - Wireframe DesignThis appendix includes basic wireframes created using Figma for the main application screens.* Home Screen* Service Booking Screen with Chatbot Integration* Technician Tracking Screen* Chatbot Interface Design* Technician Profile Page* Admin Dashboard with Chatbot AnalyticsAppendix B - Database DesignThis appendix shows the Entity Relationship Diagram (ERD) for the MongoDB database. It includes,* User Collection* Technician Collection* Booking Collection* Ratings and Reviews Collection* Chatbot Conversation Collection* Chatbot Training Data CollectionAppendix C - Chatbot Design* Conversation Flow Diagrams* Intent Classification System* Response Templates* NLP Model ArchitectureAppendix D - Gantt ChartThe Gantt chart outlines the entire project timeline from planning to final delivery, highlighting each phase (ex: requirements analysis, design, implementation, testing, deployment, evaluation, and documentation).Appendix E - Test Plan and EvaluationIncludes,* Test cases for login, booking, real-time tracking, and technician matching.* Chatbot Testing Scenarios.* Conversation Quality Evaluation.* User evaluation forms for app usage, speed, satisfaction, and chatbot effectiveness.Appendix F - Technology Stack Documentation* Flutter, Node.js, MongoDB, Firebase, Google Maps API* Python, Flask/FastAPI, spaCy/NLTK* Software used for design and version control (Figma, GitHub)* Chatbot Development EnvironmentAppendix G - User Manual Instructions,* User registration and login* Booking a repair service* Using the Chatbot Assistant* Tracking technician arrival* Chatbot Troubleshooting Guide* Leaving a review after service completion.12Hasara Sesadi/ E211307/K 2524356                                                                             Hasara Sesadi/ E211307/K 2524356                                                                             | Page